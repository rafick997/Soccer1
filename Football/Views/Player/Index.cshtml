  @using PagedList;
@using PagedList.Mvc;
@model IPagedList<Football.Models.Player>
@using Football.Models 
@using System.Data.SqlClient;
@using System.Web.UI;
@using System.Web.UI.WebControls;

@using System;
    @using System.Collections.Generic;
    @using System.Linq;
    @using System.Web;
    @using System.Web.Mvc;
@using System.Data.Entity;
@using PagedList;
@using PagedList.Mvc;

     

@{

    ViewBag.Title = "Player List";
    SoccerEntities fc = new SoccerEntities();
    List<Team1> team = new List<Team1>();
        team=fc.Team1.ToList();
    var dict = team.ToDictionary(d => d.ID, d => d.Name);


    }
         
        <h2>Player List</h2>
        <p>
            @Html.ActionLink("Create new player", "Create")
        

       
            @using (Html.BeginForm("Index", "Player", FormMethod.Get))
            {
                @Html.RadioButton("searchBy", "Name", true)<text>Name</text>
            

                @Html.TextBox("search") <input type="submit" class="button special" value="Search" />

            }
        </p>

        <table class="table">
            <tr>

                <th>
                    @Html.ActionLink("Name", "Index", new { sortBy = ViewBag.SortNameParameter, searchBy = Request.QueryString["searchBy"], search = Request.QueryString["search"] })
                </th>
                <th>
                    @Html.ActionLink("Age", "Index", new { sortBy = ViewBag.SortAgeParameter, searchBy = Request.QueryString["searchBy"], search = Request.QueryString["search"] })
                </th>
                <th>
                    @Html.DisplayName("Team")
                </th><th>
    @{
        if (this.User.IsInRole("User")|| this.User.IsInRole("Admin"))
        {

            @Html.DisplayName("Actions")

        }
    }
</th>



            </tr>

            @if (Model.Count() == 0)
            {
                <tr>
                    <td colspan="4">No data math with search criteria</td>
                </tr>
            }
            else
            {
                foreach (var item in Model)
                {
                    <tr>

                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Age)
                        </td>
                        <td>
                           
                         @Html.Raw(dict[item.TeamID])
                        </td>
                        <td>
                            @{  if (this.User.IsInRole("User"))
                                {
                                    @Html.ActionLink("Details", "Details", new { playerId = item.ID }, null)
                                }
                                else if (this.User.IsInRole("Admin"))
                                {
                                    @Html.ActionLink("Details", "Details", new { playerId = item.ID }, null)
                                    @Html.ActionLink("Edit", "Edit", new { playerId = item.ID }, null)
                                    @Html.ActionLink("Delete player", "Delete", new { playerId = item.ID, teamId = item.TeamID })
                                }}
                        </td>
                    </tr>
                }
            }


        </table>
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, searchBy = Request.QueryString["searchBy"], search = Request.QueryString["search"],sortBy=Request.QueryString["sortBy"] }),
    new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded, DisplayPageCountAndCurrentLocation = true })
        <p>
            @Html.ActionLink("Back to List of players", "Index", "Player")
        </p>
